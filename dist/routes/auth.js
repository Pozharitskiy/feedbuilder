import { shopify, sessionStorage } from "../shopify.js";
export const authRoutes = (app) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º middleware –Ω–∞–ø—Ä—è–º—É—é
    app.get("/auth", shopify.auth.begin());
    // Endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    app.get("/auth/logout", async (req, res) => {
        const shop = req.query.shop;
        if (!shop) {
            return res.status(400).send("Missing shop parameter");
        }
        try {
            // Delete both offline and online sessions
            await sessionStorage.deleteSession(`offline_${shop}`);
            await sessionStorage.deleteSession(`online_${shop}`);
            console.log(`‚úÖ Deleted sessions for ${shop}`);
            res.send(`Sessions deleted for ${shop}. <a href="/install?shop=${shop}">Reinstall app</a>`);
        }
        catch (error) {
            console.error("‚ùå Failed to delete sessions:", error);
            res.status(500).send(`Error: ${error}`);
        }
    });
    app.get("/auth/callback", shopify.auth.callback(), async (req, res) => {
        console.log("‚úÖ Auth callback received");
        console.log("üì¶ Callback request:", {
            path: req.path,
            query: req.query,
        });
        // –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ middleware –æ—Ç—Ä–∞–±–æ—Ç–∞–ª, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ res.locals
        const session = res.locals?.shopify?.session;
        if (!session) {
            console.error("‚ùå No session found after callback middleware");
            console.error("üì¶ res.locals:", res.locals);
            return res.status(500).send("No session found after OAuth");
        }
        const shopDomain = session.shop;
        const accessToken = session.accessToken;
        const expectedScopes = (process.env.SCOPES || "read_products").split(",");
        const receivedScopes = (session.scope || "").split(",").filter(Boolean);
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log("üì¶ New session from OAuth:", {
            shop: shopDomain,
            tokenLength: accessToken?.length,
            tokenPreview: accessToken?.substring(0, 10) + "...",
            receivedScopes: receivedScopes,
            expectedScopes: expectedScopes,
            scopesMatch: JSON.stringify(receivedScopes.sort()) ===
                JSON.stringify(expectedScopes.sort()),
        });
        // Session —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ middleware, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try {
            // Verify session was saved
            const savedSession = await sessionStorage.loadSession(`offline_${shopDomain}`);
            if (savedSession) {
                console.log(`‚úÖ Session confirmed saved for ${shopDomain}`, {
                    tokenLength: savedSession.accessToken?.length,
                });
            }
            else {
                console.warn(`‚ö†Ô∏è Session not found after save for ${shopDomain}`);
            }
        }
        catch (error) {
            console.error("‚ùå Failed to verify session:", error);
        }
        console.log(`‚úÖ Auth completed for ${shopDomain}, redirecting...`);
        res.redirect(`https://${shopDomain}/admin/apps`);
    });
};
