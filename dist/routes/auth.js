import { shopify } from "../shopify.js";
import { sessionStorage } from "../db.js";
export const authRoutes = (app) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º middleware –Ω–∞–ø—Ä—è–º—É—é
    app.get("/auth", shopify.auth.begin());
    app.get("/auth/callback", shopify.auth.callback(), async (req, res) => {
        console.log("‚úÖ Auth callback completed");
        // –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ middleware –æ—Ç—Ä–∞–±–æ—Ç–∞–ª, —Å–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ res.locals
        const session = res.locals?.shopify?.session;
        if (!session) {
            console.error("‚ùå No session found after callback");
            return res.status(500).send("No session found");
        }
        const shopDomain = session.shop;
        const accessToken = session.accessToken;
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log("üì¶ New session from OAuth:", {
            shop: shopDomain,
            tokenLength: accessToken?.length,
            tokenPreview: accessToken?.substring(0, 10) + "...",
            scopes: session.scope,
        });
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—à—É –ë–î –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        try {
            sessionStorage.saveSession({
                id: session.id,
                shop: shopDomain,
                accessToken: accessToken,
                scopes: session.scope || "",
                isOnline: session.isOnline || false,
                expiresAt: session.expires
                    ? new Date(session.expires).getTime()
                    : undefined,
                createdAt: Date.now(),
                updatedAt: Date.now(),
            });
            console.log("‚úÖ Shop authorized and saved:", shopDomain, "| Scopes:", session.scope);
        }
        catch (error) {
            console.error("‚ùå Failed to save session:", error);
        }
        res.redirect(`https://${shopDomain}/admin/apps`);
    });
};
