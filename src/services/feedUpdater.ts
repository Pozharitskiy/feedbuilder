import cron from "node-cron";
import { sessionStorage, feedCacheStorage } from "../db.js";
import { FeedBuilder } from "./feedBuilder.js";
import { FeedFormat } from "../types/feed.js";

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ñ–∏–¥–æ–≤
 */
export class FeedUpdater {
  private isRunning = false;

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å cron –∑–∞–¥–∞—á–∏
   */
  start() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–¥–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    cron.schedule("0 */6 * * *", () => {
      this.updateAllFeeds();
    });

    // Keep-alive ping –∫–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã Fly.io –Ω–µ —É—Å—ã–ø–∏–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
    cron.schedule("*/25 * * * *", () => {
      this.keepAlive();
    });

    console.log("‚úÖ Feed updater cron jobs started");
    console.log("   - Feed updates: every 6 hours");
    console.log("   - Keep-alive ping: every 25 minutes");
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ñ–∏–¥—ã –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
   */
  async updateAllFeeds() {
    if (this.isRunning) {
      console.log("‚è≠Ô∏è Feed update already running, skipping...");
      return;
    }

    this.isRunning = true;
    console.log("üîÑ Starting scheduled feed update job");

    try {
      const shops = sessionStorage.getAllShops();
      const formats: FeedFormat[] = [
        "google-shopping",
        "yandex-yml",
        "facebook",
      ];

      console.log(`üì¶ Updating feeds for ${shops.length} shops`);

      let successCount = 0;
      let errorCount = 0;

      for (const shop of shops) {
        for (const format of formats) {
          try {
            console.log(`   üî® Updating ${format} for ${shop}...`);

            const builder = new FeedBuilder({
              format,
              shop,
              title: `${shop} Product Feed`,
              currency: "USD",
              filterByAvailability: false,
              filterByStatus: true,
              includeVariants: true,
            });

            const result = await builder.build();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            feedCacheStorage.saveCache(
              shop,
              format,
              result.content,
              result.variantsCount
            );

            successCount++;
            console.log(
              `   ‚úÖ ${format} updated for ${shop} (${result.variantsCount} variants)`
            );
          } catch (error: any) {
            errorCount++;
            console.error(
              `   ‚ùå Failed to update ${format} for ${shop}:`,
              error.message
            );
          }
        }
      }

      console.log(
        `‚úÖ Feed update job completed: ${successCount} successful, ${errorCount} failed`
      );
    } catch (error) {
      console.error("‚ùå Feed update job error:", error);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Keep-alive ping –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Å—ã–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private async keepAlive() {
    const appUrl = process.env.APP_URL;
    if (!appUrl) {
      return;
    }

    try {
      const response = await fetch(`${appUrl}/ping`);
      if (response.ok) {
        console.log("üèì Keep-alive ping successful");
      } else {
        console.log(`‚ö†Ô∏è Keep-alive ping failed: ${response.status}`);
      }
    } catch (error: any) {
      console.error("‚ùå Keep-alive ping error:", error.message);
    }
  }

  /**
   * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
   */
  async updateFeed(shop: string, format: FeedFormat): Promise<void> {
    console.log(`üî® Manual feed update: ${format} for ${shop}`);

    const builder = new FeedBuilder({
      format,
      shop,
      title: `${shop} Product Feed`,
      currency: "USD",
      filterByAvailability: false,
      filterByStatus: true,
      includeVariants: true,
    });

    const result = await builder.build();

    feedCacheStorage.saveCache(
      shop,
      format,
      result.content,
      result.variantsCount
    );

    console.log(`‚úÖ Feed updated: ${result.variantsCount} variants`);
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤)
   */
  invalidateCache(shop: string) {
    feedCacheStorage.invalidateCache(shop);
    console.log(`üóëÔ∏è Cache invalidated for ${shop}`);
  }
}

// Singleton instance
export const feedUpdater = new FeedUpdater();
